<?php

/**
 * @file
 * Module for providing a block that allows annonymous and authenticated 
 * users to validate registration codes based on their email address
 */

/**
 * Implementation of hook_menu().
 */
function regcode_block_menu() { 

  $items['admin/user/regcode/block'] = array(
    'title' => 'Registration code block',
    'description' => 'Settings for registration code block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('regcode_block_admin'), 
    'access arguments' => array('administer registration codes'),
    'weight' => 55,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


function regcode_block_admin() {
    //TODO
}

/**
 * Implementation of hook_block().
 */
function regcode_block_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {

    case 'list':
      $blocks[0]['info'] = t('Registration code block');
      return $blocks;

    case 'view':
      if ($delta == 0) {
        $block['subject'] = t('Resitration code');
        $block['content'] = drupal_get_form('regcode_block');
      }

      return $block;
  }    
}


/**
 * Form builder for the regcode_block
 */

function regcode_block(){
  global $user;

  if ($user->uid == 0) {
    $email_disabled = FALSE;
  }else {
    $email_disabled = TRUE;    
  }

  $form = array();

  $form['regcode_block_introtext'] = array(
    '#type'        => 'markup',
    '#value'       => t('Enter your email address and registration code'),
  );
  
  $form['regcode_block_mail'] = array('#type' => 'textfield',
    '#title' => t('E-mail address'),
    
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#description' => t('Please enter a valid email address'),
    '#required' => TRUE,
    '#disabled' => $email_disabled,  
  );
  
  // We change the help text for loged in user to be able to logout.
  
  if($email_disabled){
    $destination = drupal_get_destination();
    $form['regcode_block_mail']['#description'] = t('If this is not your email address, please <a href="@log-out">log out</a> or <a href="@edit-account">edit your account</a>', array('@log-out' => url('logout', array('query' => $destination)), '@edit-account' => url('user/' . $user->uid . '/edit', array('query' => $destination)))); 
    $form['regcode_block_mail']['#value'] = $user->mail;
  }

  $form['regcode_block_code'] = array(
    '#type'        => 'textfield',
    '#title'       => t('Registration Code'),
    '#description' => t('Please enter your registration code.'),
    '#required'    => TRUE,
  );

  $form['regcode_block_submit'] = array(
    '#type'        => 'submit',
    '#value'       => t('Submit'),
  );

  return $form;
}


/*
 * Form validation for regcode_block
 */
function regcode_block_validate($form, $form_state) {
  $mail = $form_state['values']['regcode_block_mail'];
  $regcode = $form_state['values']['regcode_block_code'];

// Validate the email address  
  if (!valid_email_address($mail)) {
    form_set_error('regcode_block_mail', 'Please insert a valid email address');
  }

// We validate the code using regcode_use function provided by regcode
  $code = regcode_use($regcode);
  if (!is_object($code)) {
    form_set_error('regcode_block_code', regcode_errormsg($code));
    watchdog('regcode', 'User entered invalid registration code (@code)', array('@code' => $edit['regcode_code']), WATCHDOG_WARNING);
  }
}


/*
 * If validation of email and code is correct we submit the regcode_block form
 */

function regcode_block_submit($form, $form_state) {
  global $user;
  $edit['regcode_code'] = $form_state['values']['regcode_block_code'];
  $mail = $form_state['values']['regcode_block_mail'];
  $user_exist = FALSE;
  
// If the user is annonymous we check if there is a user with the email provided
  if ($user->uid == 0){
    $user_exist = user_load(array('mail' => $mail));//returns false if user does not exist
    //TODO: quitar esto

    if ($user_exist == FALSE) {
      // We create a user when no user has that email
      // We need a username to create a new user: this is taken from email_registration module
      // Default implementation of name generation 
      $namenew = preg_replace('/@.*$/', '', $mail);
      // Remove unwanted characters
      $namenew = preg_replace('/[^a-zA-Z0-9.-]/', '', $namenew);
      // if username generated from email record already exists, append underscore and number eg:(chris_123)
      if (db_result(db_query("SELECT count(*) FROM {users} WHERE uid <> %d AND LOWER(name) = LOWER('%s')", $account->uid, $namenew)) > 0) {
        // find the next number available to append to the name
        $sql = "SELECT SUBSTRING_INDEX(name,'_',-1) FROM {users} WHERE name REGEXP '%s' ORDER BY CAST(SUBSTRING_INDEX(name,'_',-1) AS UNSIGNED) DESC LIMIT 1";
        $nameidx = db_result(db_query($sql, '^' . $namenew . '_[0-9]+$'));
        $namenew .= '_' . ($nameidx + 1);
      }
      
      $pass = user_password();
      $userfields = array('name' => $namenew,
          'pass' => $pass,
          'mail' => $mail,
          'status' => 1,);
      $newuser = user_save('', $userfields, 'account');
      // Terminate if an error occured during user_save().
      if (!$newuser) {
        drupal_set_message(t('Error creating user account.'), 'error');
        $form_state['redirect'] = '';
        return;
      }

      // Now that we created a user we send him the welcome mail from user modules

      $newuser->password = $pass; // psw in pain text for email
      $params['account'] = $newuser;
      $language = NULL;
      drupal_mail('user', 'register_no_approval_required', $newuser->mail, $language, $params);

      drupal_set_message(t('New account created for !email. Check you inbox for your passwords and further instructions', array('!email' => $newuser->mail)), 'status');
      watchdog('regcode_block', 'Account created to validate a code: !user', array('!user' => l($newuser->name, 'user/' . $newuser->uid)), 'WATCHDOG_NOTICE', l(t('view user'), 'user/' . $newuser->uid), NULL);
      $account = $newuser;
    }
    else {
      $account = $user_exist;
      drupal_set_message(t('There is an existing account with email: !email. This registration code will be applied to that account.', array('!email' => $account->mail)), 'status');
      watchdog('regcode_block', 'Annonymous user is using an existing account email to validate a code: !user', array('!user' => l($account->name, 'user/' . $account->uid)), 'WATCHDOG_NOTICE', l(t('view user'), 'user/' . $account->uid), NULL);
    }
  }
  else{
    $account = $user;
  }
  
// We use the helper function provided by regcode so all the hooks are called properly
  $code = regcode_use_helper($edit, $account);
// TODO: For the UCE branch we use a message sent by rules, this could be configured in the future admin page for regcode_blcok  
//  if (is_object($code)) {
//    drupal_set_message(variable_get('regcode_voucher_message', t('Voucher code used successfully')));
//  }
}

/**
 * Implementation of hook_form_alter().
 */
function regcode_block_form_alter(&$form, &$form_state, $form_id) {
// TODO ocultar en /user/register el campo de cÃ³digo promocional
  if ($form_id == 'user_register') {

    unset($form['regcode']);
  }
}

/**
 * Helper function to create a node profile for the user if user have got none
 * 
 */
function regcode_block_get_datos_personales($account) {
  // We have to create de node profile in order to add credits afterwards
  
  $profile_exist = content_profile_load('datos_personales', $account->uid, '', TRUE);
  
  if (!$profile_exist) {

    $time = time();

    $profile_node = new stdClass();
    $profile_node->type = 'datos_personales';
    $profile_node->uid = $account->uid;
    $profile_node->name = (isset($account->name)) ? $account->name : '';
    $profile_node->language = '';
    $profile_node->title = 'Datos personales';
    $profile_node->created = $time;
    $profile_node->changed = $time;
    $profile_node->status = 1;
    $profile_node->promote = 0;
    $profile_node->sticky = 0;
    $profile_node->field_dp_num_creditos[0]['value'] = 0;
    // $sites = _contentsync_get_sites();
    // foreach ($sites as $hostname) {
    //   $hostname = check_plain(trim($hostname));
    //   $profile_node->contentsync[$hostname] = TRUE;
    // }
dpm($profile_node);
    node_save($profile_node);
dpm($profile_node);
    $dp_node = content_profile_load('datos_personales', $account->uid, '', TRUE);
    dpm($dp_node);
    return $dp_node;
  } 
  else {
    dpm ('exists');
    dpm ($profile_exist);
    return $profile_exist;
    
  }
}